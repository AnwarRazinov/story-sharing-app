const CACHE_NAME="dev-cache-v1",DATA_CACHE="dev-data-cache-v1",getBasePath=()=>self.location.pathname.includes("/story-sharing-app/")?"/story-sharing-app":"",basePath=getBasePath(),urlsToCache=[`${basePath}/`,`${basePath}/index.html`,`${basePath}/manifest.json`];self.addEventListener("install",(e=>{console.log("[SW Dev] Installing... Base path:",basePath),e.waitUntil(caches.open(CACHE_NAME).then((e=>(console.log("[SW Dev] Caching basic files"),e.addAll(urlsToCache)))).catch((e=>{console.log("[SW Dev] Cache failed:",e)}))),self.skipWaiting()})),self.addEventListener("activate",(e=>{console.log("[SW Dev] Activating..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==CACHE_NAME&&e!==DATA_CACHE)return console.log("[SW Dev] Deleting old cache:",e),caches.delete(e)}))))).then((()=>self.clients.claim())))})),self.addEventListener("fetch",(e=>{const t=e.request,n=new URL(t.url);console.log("[SW Dev] Fetching:",t.url),"https://story-api.dicoding.dev"!==n.origin?e.respondWith(fetch(t).then((e=>{if(200===e.status){const n=e.clone();caches.open(CACHE_NAME).then((e=>{e.put(t,n)}))}return e})).catch((e=>(console.log("[SW Dev] Network failed for:",t.url),caches.match(t).then((n=>{if(n)return console.log("[SW Dev] Serving from cache:",t.url),n;if("navigate"===t.mode)return console.log("[SW Dev] Serving fallback page for navigation"),caches.match(`${basePath}/index.html`);throw e})))))):e.respondWith(caches.open(DATA_CACHE).then((e=>fetch(t).then((n=>("GET"===t.method&&200===n.status&&(console.log("[SW Dev] Caching API response:",t.url),e.put(t,n.clone())),n))).catch((n=>(console.log("[SW Dev] Network failed, trying cache:",t.url),e.match(t).then((e=>{if(e)return console.log("[SW Dev] Serving API from cache:",t.url),e;throw console.log("[SW Dev] No cache available for:",t.url),n}))))))))})),self.addEventListener("push",(e=>{console.log("[SW Dev] Push received:",e);const t={body:"Push notification working in development!",icon:`${basePath}/icon-192x192.png`,badge:`${basePath}/icon-192x192.png`};e.waitUntil(self.registration.showNotification("Development Push Test",t))})),self.addEventListener("notificationclick",(e=>{console.log("[SW Dev] Notification click:",e),e.notification.close(),e.waitUntil(clients.openWindow(`${basePath}/`))}));